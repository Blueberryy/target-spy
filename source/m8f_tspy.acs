#library "target-spy"
#include "zcommon.acs"

/* Copyright Alexander Kromm (mmaulwurff@gmail.com) 2018
 *
 * This file is part of Target Spy.
 *
 * Target Spy is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Target Spy is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Target Spy.  If not, see <https://www.gnu.org/licenses/>.
 */

#define MINIMAL_HOLD_TIME 1873
#define msgFlags HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP

#define msgId        191900
#define msgIdBar     msgId
#define msgIdTag     msgId + 1
#define msgIdNum     msgId + 2
#define msgIdCrh     msgId + 3
#define msgIdCrT     msgId + 4
#define msgIdCrB     msgId + 5
#define msgIdInf     msgId + 6
#define msgIdConfirm msgId + 7

#define defaultNewline 0.03

function bool TS_TargetIsPresent(int playerN)
{
  ScriptCall("TSZScriptHelper", "TargetIsPresent");
  bool isPresent = GetUserCVar(playerN, "m8f_ts_ResultInt");
  return isPresent;
}

function int TS_GetTargetHealth(int playerN)
{
  ScriptCall("TSZScriptHelper", "GetTargetHealth");
  int targetHealth = GetUserCVar(playerN, "m8f_ts_ResultInt");
  return targetHealth;
}

function int TS_GetTargetMaxHealth(int playerN)
{
  ScriptCall("TSZScriptHelper", "GetTargetMaxHealth");
  int targetHealth = GetUserCVar(playerN, "m8f_ts_ResultInt");
  return targetHealth;
}

function bool TS_IsFreedoom(void)
{
  str impName = StrParam(l:"CC_IMP");
  str isFreedoom = (StrCmp(impName, "serpentipede") == 0);
  return isFreedoom;
}

function bool TS_IsTitlemap(void)
{
  str mapLumpName = StrParam(n:PRINTNAME_LEVEL);
  return (StrICmp(mapLumpName, "TITLEMAP") == 0);
}

function str TS_GetTargetName(int playerN, bool isFreedoom)
{
  ScriptCall("TSZScriptHelper", "GetTargetName", isFreedoom);
  str targetName = GetUserCVarString(playerN, "m8f_ts_ResultString");
  return targetName;
}

function str TS_GetTargetInfo(int playerN)
{
  ScriptCall("TSZScriptHelper", "GetAdditionalTargetInfo");
  str targetInfo = GetUserCVarString(playerN, "m8f_ts_ResultString");
  return targetInfo;
}

function int TS_Log2(int value)
{
  int result = -1;
  while (value)
    {
      ++result;
      value /= 2;
    }
  return result;
}

function str TS_MakeHealthBar(int health
                              , int maxHealth
                              , bool logScale
                              , str pipSource
                              , str emptyPipSource
                              , bool greenRedTheme)
{
  int length;
  if      (logScale)          { length = TS_Log2(maxHealth) * 2; }
  else if (maxHealth >= 2000) { length = 30; }
  else if (maxHealth >= 500)  { length = 20; }
  else                        { length = 10; }

  int pips = health * length / maxHealth;
  if      (pips == 0)      { pips = 1; }
  else if (pips >  length) { pips = length; }

  str pipColor;
  str emptyColor;
  if (greenRedTheme) { pipColor = "\cd"; emptyColor = "\cg"; }
  else               { pipColor = "";    emptyColor = "";    }

  return StrParam(s:pipColor,   s:StrLeft(pipSource,      pips),
                  s:emptyColor, s:StrLeft(emptyPipSource, length - pips));
}

int cachedColor = -1;
function void TS_DrawCrosshair(int color, str cross, str crossTop, str crossBot,
                               int playerN, int hasTarget)
{
  if (cachedColor == color) { return; }

  if (!hasTarget)
    {
      bool cross_only_on_target = GetUserCVar(playerN, "m8f_ts_cross_only_tg");
      if (cross_only_on_target) { TS_HideCrosshair(); return; }
    }

  cachedColor = color;
  HudMessage(s:crossTop; msgFlags, msgIdCrT, color, 0.5, 0.48, 0);
  HudMessage(s:cross;    msgFlags, msgIdCrh, color, 0.5, 0.51, 0);
  HudMessage(s:crossBot; msgFlags, msgIdCrB, color, 0.5, 0.54, 0);
}

function void TS_HideCrosshair(void)
{
  HudMessage(s:""; msgFlags, msgIdCrT, 0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdCrh, 0, 0, 0, 0);
  HudMessage(s:""; msgFlags, msgIdCrB, 0, 0, 0, 0);
}

script "target-spy" ENTER
{
  int playerN = PlayerNumber();
  SetUserCVar(playerN, "m8f_ts_version", 11);

  if (TS_IsTitlemap()) { terminate; }

  int colors[12] =
    {
      GetUserCVar(playerN, "m8f_ts_cr_0" ),
      GetUserCVar(playerN, "m8f_ts_cr_1" ),
      GetUserCVar(playerN, "m8f_ts_cr_2" ),
      GetUserCVar(playerN, "m8f_ts_cr_3" ),
      GetUserCVar(playerN, "m8f_ts_cr_4" ),
      GetUserCVar(playerN, "m8f_ts_cr_5" ),
      GetUserCVar(playerN, "m8f_ts_cr_6" ),
      GetUserCVar(playerN, "m8f_ts_cr_7" ),
      GetUserCVar(playerN, "m8f_ts_cr_8" ),
      GetUserCVar(playerN, "m8f_ts_cr_9" ),
      GetUserCVar(playerN, "m8f_ts_cr_10"),
      GetUserCVar(playerN, "m8f_ts_cr_10")
    };

  bool isFreedoom = TS_IsFreeDoom();

  // options
  int  minHealth = GetUserCVar(playerN, "m8f_ts_min_health");
  int  yStart    = GetUserCVar(playerN, "m8f_ts_y");
  bool logScale  = GetUserCVar(playerN, "m8f_ts_bar_log_scale");
  bool showBar   = GetUserCVar(playerN, "m8f_ts_show_bar");
  bool showName  = GetUserCVar(playerN, "m8f_ts_show_name");
  int  showNums  = GetUserCVar(playerN, "m8f_ts_show_numbers");
  bool showInfo  = GetUserCVar(playerN, "m8f_ts_show_info");
  bool showCorps = GetUserCVar(playerN, "m8f_ts_show_corpses");
  bool crossOn   = GetUserCVar(playerN, "m8f_ts_crosshair_on");
  int  crossCol  = GetUserCVar(playerN, "m8f_ts_def_color_crs");
  int  nameCol   = GetUserCVar(playerN, "m8f_ts_def_color_tag");
  int  weakCol   = GetUserCVar(playerN, "m8f_ts_def_cl_tag_wk");
  bool altHpCols = GetUserCVar(playerN, "m8f_ts_alt_hp_color");
  int  stepMult  = GetUserCVar(playerN, "m8f_ts_step_mult");
  bool almDeadCr = GetUserCVar(playerN, "m8f_ts_alm_dead_cr");
  int  crAlmDead = GetUserCVar(playerN, "m8f_ts_cr_alm_dead");
  str  pip       = GetUserCVarString(playerN, "m8f_ts_pip");
  str  emptyPip  = GetUserCVarString(playerN, "m8f_ts_empty_pip");
  str  font      = GetUserCVarString(playerN, "m8f_ts_font");
  str  crosshair = GetUserCVarString(playerN, "m8f_ts_crosshair");
  str  crossTop  = GetUserCVarString(playerN, "m8f_ts_cross_top");
  str  crossBot  = GetUserCVarString(playerN, "m8f_ts_cross_bottom");

  SetFont(font);

  int optionsUpdateCounter = 0;
  int optionsUpdatePeriod  = 35;

  str pipSource = "";
  str emptyPipSource = "";
  int i;
  for (i = 0; i < 50; ++i) pipSource      = StrParam(s:pipSource, s:pip);
  for (i = 0; i < 50; ++i) emptyPipSource = StrParam(s:emptyPipSource, s:emptyPip);

  int hpBarCacheHealth    = -1;
  int hpBarCacheMaxHealth = -1;
  str hpBarCached;

  bool oldHastarget = false;
  bool oldShowKillConfirmed = false;

  while (true)
    {
      if (!GetUserCVar(playerN, "m8f_ts_enabled")) { Delay(10); continue; }

      if (optionsUpdateCounter < optionsUpdatePeriod) { ++optionsUpdateCounter; }
      else
        {
          optionsUpdateCounter = 0;
          minHealth = GetUserCVar(playerN, "m8f_ts_min_health");
          yStart    = GetUserCVar(playerN, "m8f_ts_y");
          logScale  = GetUserCVar(playerN, "m8f_ts_bar_log_scale");
          showBar   = GetUserCVar(playerN, "m8f_ts_show_bar");
          showName  = GetUserCVar(playerN, "m8f_ts_show_name");
          showNums  = GetUserCVar(playerN, "m8f_ts_show_numbers");
          showInfo  = GetUserCVar(playerN, "m8f_ts_show_info");
          showCorps = GetUserCVar(playerN, "m8f_ts_show_corpses");
          crossOn   = GetUserCVar(playerN, "m8f_ts_crosshair_on");
          crossCol  = GetUserCVar(playerN, "m8f_ts_def_color_crs");
          nameCol   = GetUserCVar(playerN, "m8f_ts_def_color_tag");
          weakCol   = GetUserCVar(playerN, "m8f_ts_def_cl_tag_wk");
          altHpCols = GetUserCVar(playerN, "m8f_ts_alt_hp_color");
          crAlmDead = GetUserCVar(playerN, "m8f_ts_cr_alm_dead");
          stepMult  = GetUserCVar(playerN, "m8f_ts_step_mult");
          almDeadCr = GetUserCVar(playerN, "m8f_ts_alm_dead_cr");
          pip       = GetUserCVarString(playerN, "m8f_ts_pip");
          emptyPip  = GetUserCVarString(playerN, "m8f_ts_empty_pip");
          font      = GetUserCVarString(playerN, "m8f_ts_font");

          colors[ 0] = GetUserCVar(playerN, "m8f_ts_cr_0" );
          colors[ 1] = GetUserCVar(playerN, "m8f_ts_cr_1" );
          colors[ 2] = GetUserCVar(playerN, "m8f_ts_cr_2" );
          colors[ 3] = GetUserCVar(playerN, "m8f_ts_cr_3" );
          colors[ 4] = GetUserCVar(playerN, "m8f_ts_cr_4" );
          colors[ 5] = GetUserCVar(playerN, "m8f_ts_cr_5" );
          colors[ 6] = GetUserCVar(playerN, "m8f_ts_cr_6" );
          colors[ 7] = GetUserCVar(playerN, "m8f_ts_cr_7" );
          colors[ 8] = GetUserCVar(playerN, "m8f_ts_cr_8" );
          colors[ 9] = GetUserCVar(playerN, "m8f_ts_cr_9" );
          colors[10] = GetUserCVar(playerN, "m8f_ts_cr_10");
          colors[11] = GetUserCVar(playerN, "m8f_ts_cr_11");

          SetFont(font);

          pipSource      = "";
          emptyPipSource = "";
          for (i = 0; i < 50; ++i) pipSource      = StrParam(s:pipSource, s:pip);
          for (i = 0; i < 50; ++i) emptyPipSource = StrParam(s:emptyPipSource, s:emptyPip);

          if (crossOn)
            {
              crosshair = GetUserCVarString(playerN, "m8f_ts_crosshair");
              crossTop  = GetUserCVarString(playerN, "m8f_ts_cross_top");
              crossBot  = GetUserCVarString(playerN, "m8f_ts_cross_bottom");
            }
          else
            {
              TS_HideCrosshair();
            }

          hpBarCacheHealth    = -1;
          hpBarCacheMaxHealth = -1;

          cachedColor = -1;
        }

      int y       = yStart;
      int newline = FixedMul(defaultNewline, stepMult);

      int  killConfirmedCount = GetUserCVar(playerN, "m8f_ts_KillConfirmed");
      bool showKillConfirmed  = (killConfirmedCount != 0);
      if (showKillConfirmed != oldShowKillConfirmed);
      {
        if (killConfirmedCount)
        {
          SetUserCVar(playerN, "m8f_ts_KillConfirmed", killConfirmedCount - 1);
          HudMessage(s:"Kill Confirmed";
                     msgFlags, msgIdConfirm, nameCol, 0.5, y, 0);
          y += newline;
        }
        else
        {
          HudMessage(s:""; msgFlags, msgIdConfirm, 0, 0, 0, 0);
        }
        oldShowKillConfirmed = showKillConfirmed;
      }

      bool hasTarget = TS_TargetIsPresent(playerN);
      if (oldHasTarget != hasTarget) { cachedColor = -1; }
      oldHasTarget = hasTarget;
      SetUserCVar(playerN, "m8f_ts_has_target", hasTarget);

      if (!hasTarget) // no target
        {
          if (crossOn)
            {
              TS_DrawCrosshair(crossCol, crosshair, crossTop, crossBot, playerN, false);
            }
          Delay(5);
          continue;
        }

      int  targetMaxHealth = TS_GetTargetMaxHealth(playerN);
      bool showHealth      = (targetMaxHealth != 0);

      if (targetMaxHealth < minHealth && targetMaxHealth != 0) // not worth showing
        {
          if (crossOn)
            {
              TS_DrawCrosshair(crossCol, crosshair, crossTop, crossBot, playerN, hasTarget);
            }
          Delay(5);
          continue;
        }

      int targetHealth = TS_GetTargetHealth(playerN);
      if (targetHealth < 1 && !showCorps) // target is dead
        {
          if (crossOn)
            {
              TS_DrawCrosshair(crossCol, crosshair, crossTop, crossBot, playerN, hasTarget);
            }
          Delay(5);
          continue;
        }

      int tagColor;
      if (targetHealth < 100) { tagColor = weakCol; }
      else                    { tagColor = nameCol; }

      int percent = 10;
      if (showHealth)   { percent = targetHealth * 10 / targetMaxHealth; }
      if (percent > 10) { percent = 11; }

      int color = colors[percent];
      if (targetHealth < 35 && almDeadCr) { color = crAlmDead; }
      if (targetHealth < 1)               { color = crAlmDead; }
      if (altHpCols)                      { color = tagColor; }

      if (showBar && showHealth)
        {
          if (targetHealth    != hpBarCacheHealth ||
              targetMaxHealth != hpBarCacheMaxHealth)
            {
              hpBarCached = TS_MakeHealthBar(targetHealth, targetMaxHealth,
                                             logScale, pipSource, emptyPipSource,
                                             altHpCols);
              hpBarCacheHealth    = targetHealth;
              hpBarCacheMaxHealth = targetMaxHealth;
            }

          HudMessage(s:hpBarCached;
                     msgFlags, msgIdBar, color, 0.5, y, MINIMAL_HOLD_TIME);
          y += newline;
        }

      int nameColor = tagColor;
      if (targetHealth < 1) { nameColor = color; }

      if (showName)
        {
          str targetName = TS_GetTargetName(playerN, isFreedoom);
          if (targetHealth < 1)
            {
              targetName = StrParam(s:"Remains of ", s:targetName);
              nameColor  = color;
            }
          HudMessage(s:targetName;
                     msgFlags, msgIdTag, nameColor, 0.5, y, MINIMAL_HOLD_TIME);
          y += newline;
        }

      if (showInfo)
        {
          str targetInfo = TS_GetTargetInfo(playerN);
          if (StrLen(targetInfo) > 0)
            {
              HudMessage(s:targetInfo;
                         msgFlags, msgIdInf, nameColor, 0.5, y, MINIMAL_HOLD_TIME);
              y += newline;
            }
        }

      if (showHealth)
        {
          switch (showNums)
            {
            case 0: break;

            case 1:
              HudMessage(i:targetHealth, s:"/", i:targetMaxHealth;
                         msgFlags, msgIdNum, color, 0.5, y, MINIMAL_HOLD_TIME);
              y += newline;
              break;

            case 2:
              HudMessage(i:targetHealth;
                         msgFlags, msgIdNum, color, 0.5, y, MINIMAL_HOLD_TIME);
              y += newline;
              break;

            case 3:
              int percent100;
              if (targetMaxHealth == 0) { percent100 = 100; }
              else { percent100 = targetHealth * 100 / targetMaxHealth; }

              HudMessage(i:percent100, s:"%";
                         msgFlags, msgIdNum, color, 0.5, y, MINIMAL_HOLD_TIME);
              y += newline;
              break;
            }
        }

      if (crossOn)
        {
          TS_DrawCrosshair(color, crosshair, crossTop, crossBot, playerN, hasTarget);
        }

      Delay(1);
    }
}
