#library "target-spy"
#include "zcommon.acs"

#define MINIMAL_HOLD_TIME 1873
#define msgFlags HUDMSG_PLAIN | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP

#define msgId    191900
#define msgIdBar msgId
#define msgIdTag msgId + 1
#define msgIdNum msgId + 2
#define msgIdCrh msgId + 3
#define msgIdCrT msgId + 4
#define msgIdCrB msgId + 5
#define msgIdInf msgId + 6

#define newline 0.03

function bool TS_TargetIsPresent(int playerN)
{
  ScriptCall("TSZScriptHelper", "TargetIsPresent");
  bool isPresent = GetUserCVar(playerN, "m8f_ts_ResultInt");
  return isPresent;
}

function int TS_GetTargetHealth(int playerN)
{
  ScriptCall("TSZScriptHelper", "GetTargetHealth");
  int targetHealth = GetUserCVar(playerN, "m8f_ts_ResultInt");
  return targetHealth;
}

function int TS_GetTargetMaxHealth(int playerN)
{
  ScriptCall("TSZScriptHelper", "GetTargetMaxHealth");
  int targetHealth = GetUserCVar(playerN, "m8f_ts_ResultInt");
  return targetHealth;
}

function bool TS_IsFreedoom(void)
{
  str impName = StrParam(l:"CC_IMP");
  str isFreedoom = (StrCmp(impName, "serpentipede") == 0);
  return isFreedoom;
}

function str TS_GetTargetName(int playerN, bool isFreedoom)
{
  ScriptCall("TSZScriptHelper", "GetTargetName", isFreedoom);
  str targetName = GetUserCVarString(playerN, "m8f_ts_ResultString");
  return targetName;
}

function str TS_GetTargetInfo(int playerN)
{
  ScriptCall("TSZScriptHelper", "GetAdditionalTargetInfo");
  str targetInfo = GetUserCVarString(playerN, "m8f_ts_ResultString");
  return targetInfo;
}

function int TS_Log2(int value)
{
  int result = -1;
  while (value)
    {
      ++result;
      value /= 2;
    }
  return result;
}

function str TS_MakeHealthBar(int health
                              , int maxHealth
                              , bool logScale
                              , str pipSource
                              , str emptyPipSource
                              , bool greenRedTheme)
{
  int length;
  if      (logScale)          { length = TS_Log2(maxHealth) * 2; }
  else if (maxHealth >= 2000) { length = 30; }
  else if (maxHealth >= 500)  { length = 20; }
  else                        { length = 10; }

  int pips = health * length / maxHealth;
  if      (pips == 0)      { pips = 1; }
  else if (pips >  length) { pips = length; }

  str pipColor;
  str emptyColor;
  if (greenRedTheme) { pipColor = "\cd"; emptyColor = "\cg"; }
  else               { pipColor = "";    emptyColor = "";    }

  return StrParam(s:pipColor,   s:StrLeft(pipSource,      pips),
                  s:emptyColor, s:StrLeft(emptyPipSource, length - pips));
}

int cachedColor = -1;
function void TS_DrawCrosshair(int color, str cross, str crossTop, str crossBot)
{
  if (cachedColor == color) { return; }

  cachedColor = color;
  HudMessage(s:crossTop; msgFlags, msgIdCrT, color, 0.5, 0.48, 0);
  HudMessage(s:cross;    msgFlags, msgIdCrh, color, 0.5, 0.51, 0);
  HudMessage(s:crossBot; msgFlags, msgIdCrB, color, 0.5, 0.54, 0);
}

script "target-spy" ENTER
{
  int colors[12] =
    {
      CR_RED,
      CR_RED,
      CR_RED,
      CR_ORANGE,
      CR_ORANGE,
      CR_ORANGE,
      CR_GOLD,
      CR_GOLD,
      CR_GOLD,
      CR_TAN,
      CR_TAN,
      CR_CYAN,
    };

  bool isFreedoom = TS_IsFreeDoom();
  int  playerN    = PlayerNumber();

  // options
  int  minHealth = GetUserCVar(playerN, "m8f_ts_min_health");
  int  yStart    = GetUserCVar(playerN, "m8f_ts_y");
  bool logScale  = GetUserCVar(playerN, "m8f_ts_bar_log_scale");
  bool showBar   = GetUserCVar(playerN, "m8f_ts_show_bar");
  bool showName  = GetUserCVar(playerN, "m8f_ts_show_name");
  bool showNums  = GetUserCVar(playerN, "m8f_ts_show_numbers");
  bool showInfo  = GetUserCVar(playerN, "m8f_ts_show_info");
  bool crossOn   = GetUserCVar(playerN, "m8f_ts_crosshair_on");
  int  crossCol  = GetUserCVar(playerN, "m8f_ts_def_color_crs");
  int  nameCol   = GetUserCVar(playerN, "m8f_ts_def_color_tag");
  bool altHpCols = GetUserCVar(playerN, "m8f_ts_alt_hp_color");
  str  pip       = GetUserCVarString(playerN, "m8f_ts_pip");
  str  emptyPip  = GetUserCVarString(playerN, "m8f_ts_empty_pip");
  str  font      = GetUserCVarString(playerN, "m8f_ts_font");
  str  crosshair = GetUserCVarString(playerN, "m8f_ts_crosshair");
  str  crossTop  = GetUserCVarString(playerN, "m8f_ts_cross_top");
  str  crossBot  = GetUserCVarString(playerN, "m8f_ts_cross_bottom");

  SetFont(font);

  int optionsUpdateCounter = 0;
  int optionsUpdatePeriod  = 35;

  str pipSource = "";
  str emptyPipSource = "";
  int i;
  for (i = 0; i < 50; ++i) pipSource      = StrParam(s:pipSource, s:pip);
  for (i = 0; i < 50; ++i) emptyPipSource = StrParam(s:emptyPipSource, s:emptyPip);

  int hpBarCacheHealth    = -1;
  int hpBarCacheMaxHealth = -1;
  str hpBarCached;

  while (true)
    {
      if (!GetUserCVar(playerN, "m8f_ts_enabled")) { Delay(10); continue; }

      if (optionsUpdateCounter < optionsUpdatePeriod) { ++optionsUpdateCounter; }
      else
        {
          optionsUpdateCounter = 0;
          minHealth = GetUserCVar(playerN, "m8f_ts_min_health");
          yStart    = GetUserCVar(playerN, "m8f_ts_y");
          logScale  = GetUserCVar(playerN, "m8f_ts_bar_log_scale");
          showBar   = GetUserCVar(playerN, "m8f_ts_show_bar");
          showName  = GetUserCVar(playerN, "m8f_ts_show_name");
          showNums  = GetUserCVar(playerN, "m8f_ts_show_numbers");
          showInfo  = GetUserCVar(playerN, "m8f_ts_show_info");
          crossOn   = GetUserCVar(playerN, "m8f_ts_crosshair_on");
          crossCol  = GetUserCVar(playerN, "m8f_ts_def_color_crs");
          nameCol   = GetUserCVar(playerN, "m8f_ts_def_color_tag");
          altHpCols = GetUserCVar(playerN, "m8f_ts_alt_hp_color");
          pip       = GetUserCVarString(playerN, "m8f_ts_pip");
          emptyPip  = GetUserCVarString(playerN, "m8f_ts_empty_pip");
          font      = GetUserCVarString(playerN, "m8f_ts_font");

          SetFont(font);

          pipSource      = "";
          emptyPipSource = "";
          for (i = 0; i < 50; ++i) pipSource      = StrParam(s:pipSource, s:pip);
          for (i = 0; i < 50; ++i) emptyPipSource = StrParam(s:emptyPipSource, s:emptyPip);

          if (crossOn)
            {
              crosshair = GetUserCVarString(playerN, "m8f_ts_crosshair");
              crossTop  = GetUserCVarString(playerN, "m8f_ts_cross_top");
              crossBot  = GetUserCVarString(playerN, "m8f_ts_cross_bottom");
            }
          else
            {
              HudMessage(s:""; msgFlags, msgIdCrT, 0, 0, 0, 0);
              HudMessage(s:""; msgFlags, msgIdCrh, 0, 0, 0, 0);
              HudMessage(s:""; msgFlags, msgIdCrB, 0, 0, 0, 0);
            }

          hpBarCacheHealth    = -1;
          hpBarCacheMaxHealth = -1;

          cachedColor = -1;
        }

      bool hasTarget = TS_TargetIsPresent(playerN);
      SetUserCVar(playerN, "m8f_ts_has_target", hasTarget);
      if (!hasTarget) // no target
        {
          if (crossOn)
            {
              TS_DrawCrosshair(crossCol, crosshair, crossTop, crossBot);
            }
          Delay(5);
          continue;
        }

      int targetMaxHealth = TS_GetTargetMaxHealth(playerN);
      if (targetMaxHealth < minHealth) // not worth showing
        {
          if (crossOn)
            {
              TS_DrawCrosshair(crossCol, crosshair, crossTop, crossBot);
            }
          Delay(5);
          continue;
        }

      int targetHealth = TS_GetTargetHealth(playerN);
      if (targetHealth < 1) // target is dead
        {
          if (crossOn)
            {
              TS_DrawCrosshair(crossCol, crosshair, crossTop, crossBot);
            }
          Delay(5);
          continue;
        }

      int percent = targetHealth * 10 / targetMaxHealth;
      if (percent > 10) { percent = 11; }

      int color = colors[percent];
      if (targetHealth < 35)
        {
          color = CR_BLACK;
        }

      int y = yStart;

      if (showBar)
        {
          if (targetHealth    != hpBarCacheHealth ||
              targetMaxHealth != hpBarCacheMaxHealth)
            {
              hpBarCached = TS_MakeHealthBar(targetHealth, targetMaxHealth,
                                             logScale, pipSource, emptyPipSource,
                                             altHpCols);
              hpBarCacheHealth    = targetHealth;
              hpBarCacheMaxHealth = targetMaxHealth;
            }

          HudMessage(s:hpBarCached;
                     msgFlags, msgIdBar, color, 0.5, y, MINIMAL_HOLD_TIME);
          y += newline;
        }

      if (showName)
        {
          str targetName = TS_GetTargetName(playerN, isFreedoom);
          HudMessage(s:targetName;
                     msgFlags, msgIdTag, nameCol, 0.5, y, MINIMAL_HOLD_TIME);
          y += newline;
        }

      if (showInfo)
        {
          str targetInfo = TS_GetTargetInfo(playerN);
          if (StrLen(targetInfo) > 0)
            {
              HudMessage(s:targetInfo;
                         msgFlags, msgIdInf, nameCol, 0.5, y, MINIMAL_HOLD_TIME);
              y += newline;
            }
        }

      if (showNums)
        {
          HudMessage(i:targetHealth, s:"/", i:targetMaxHealth;
                     msgFlags, msgIdNum, color, 0.5, y, MINIMAL_HOLD_TIME);
          y += newline;
        }

      if (crossOn)
        {
          TS_DrawCrosshair(color, crosshair, crossTop, crossBot);
        }

      Delay(1);
    }
}
