version "3.2.0"

/* Copyright Alexander Kromm (mmaulwurff@gmail.com) 2018
 *
 * This file is part of Target Spy.
 *
 * Target Spy is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Target Spy is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Target Spy.  If not, see <https://www.gnu.org/licenses/>.
 */

class TSZScriptHelper : Actor
{
  static void SendResultString(PlayerInfo player, string result)
  {
    if (!player) { return; }
    CVar messageCVar = CVar.GetCVar("m8f_ts_ResultString", player);
    if (messageCVar) { messageCVar.SetString(result); }
  }

  static void SendResultInt(PlayerInfo player, int result)
  {
    if (!player) { return; }
    CVar messageCVar = CVar.GetCVar("m8f_ts_ResultInt", player);
    if (messageCVar) { messageCVar.SetInt(result); }
  }

  static void TargetIsPresent(Actor a)
  {
    if (!a) { return; }

    Actor target    = GetTarget(a);
    bool  isPresent = (target != null);

    if (isPresent) { m8f_ts_TargetCache.Get().lastTarget = target; }

    SendResultInt(a.player, isPresent);
  }

  static void GetTargetHealth(Actor a)
  {
    if (!a) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultInt(a.player, 0); return; }

    int targetHealth = target.Health;
    SendResultInt(a.player, targetHealth);
  }

  static void GetTargetMaxHealth(Actor a)
  {
    if (!a) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultInt(a.player, 0); return; }

    if (!target.bSHOOTABLE)
      {
        SendResultInt(a.player, 0);
        return;
      }

    int targetMaxHealth = target.SpawnHealth();
    SendResultInt(a.player, targetMaxHealth);
  }

  static string AddAdditionalInfo(Actor a, Actor target, string name)
  {
    Inventory inv = Inventory(target);
    if (inv)
      {
        int amount = inv.amount;
        if (amount == 1)
          {
            BasicArmorPickup armor = BasicArmorPickup(inv);
            if (armor) { amount = armor.SaveAmount; }
          }
        if (amount == 1) { return name; }
        else             { return StringStruct.Format("%s (%i)", name, amount); }
      }
    else
      {
        return PrependChampionColor(a, target, name);
      }
  }

  static string PrependChampionColor(Actor a, Actor target, string name)
  {
    if (!a) { return name; }
    PlayerInfo player =  a.player;
    if (!player) { return name; }

    bool showChampion = CVar.GetCVar("m8f_ts_show_champion", player).GetInt();
    if (!showChampion) { return name; }

    string tokenClass = "champion_Token";
    Inventory token = target.FindInventory(tokenClass, true);
    if (!token) { return name; }

    string tokenClassName = token.GetClassName();
    string championTag    = m8f_ts_Data.get().championTokens.get(tokenClassName);
    if (championTag.Length() == 0) { championTag = "Champion"; }

    championTag.AppendFormat(" %s", name);
    return championTag;
  }

  static void GetTargetName(Actor a, bool isFreedoom)
  {
    if (!a) { return; }
    PlayerInfo player =  a.player;
    if (!player) { return; }

    // protect agains no target
    Actor target = GetTarget(a);
    if (target == null) { SendResultString(player, "unknown"); return; }

    string targetClass = target.GetClassName();

    bool showInternalNames = CVar.GetCVar("m8f_class_as_tag", player).GetInt();
    if (showInternalNames) { SendResultString(player, targetClass); return; }

    // to give Freedoom monsters special names
    if (isFreedoom) { targetClass.AppendFormat("_free"); }

    // if target name was found before, just return it
    let cache = TagCache.Get();
    if (cache.cachedClass == targetClass)
      {
        SendResultString(player, AddAdditionalInfo(a, target, cache.cachedTag));
        return;
      }

    // if target name is set via actor tag, return it
    string targetName = target.GetTag();
    if (targetName != targetClass && !isFreedoom)
      {
        cache.SetCache(targetClass, targetName);
        SendResultString(player, AddAdditionalInfo(a, target, targetName));
        return;
      }

    string specialName = m8f_ts_Data.get().specialNames.get(targetClass);
    if (specialName.Length() != 0)
      {
        targetName = specialName;
        cache.SetCache(targetClass, targetName);
        SendResultString(player, AddAdditionalInfo(a, target, targetName));
        return;
      }

    // if target name is not found, compose tag from class name
    targetName = SeparateCamelCase(targetName);
    targetName.Replace("_", " ");

    cache.SetCache(targetClass, targetName);
    SendResultString(player, AddAdditionalInfo(a, target, targetName));
  }

  static Actor GetTarget(Actor a)
  {
    static const string blackList[] =
      {
        "m8f_aas_token",
        "AutoautosaveToken",
        "AutoautosaveAlertToken",
        "AutoautosaveAlerter",
        "AutoautosaveBossAlerter",
        "UGGib_Corpse_Shootable",
        "VoidField"
      };
    int blackListSize = 7;

    let player = a.player;
    if (!player) { return null; }

    // try an easy way to get a target (also works with autoaim)
    Actor target = player.mo.AimTarget();

    // if target is not found by easy way, try the difficult way
    if (target == null)
      {
        FTranslatedLineTarget victimTarget;
        a.LineAttack(a.angle, 4000.0, a.pitch, 0, "none",
                     "m8f_ts_InvisiblePuff", LAF_NOIMPACTDECAL, victimTarget);
        target = victimTarget.linetarget;
      }

    int showObjects = CVar.GetCVar("m8f_ts_show_objects", player).GetInt();

    if (target == null && showObjects > 1)
      {
        FTranslatedLineTarget ftlt;
        a.AimLineAttack(a.angle, 2048.0, ftlt, 0,
                        ALF_CHECKNONSHOOTABLE | ALF_FORCENOSMART);
        target = ftlt.linetarget;
      }

    // give up
    if (target == null) { return null; }

    for (int i = 0; i < blackListSize; ++i)
      {
        if (target is blackList[i]) { return null; }
      }

    if (target.bISMONSTER)
      {
        if (target.bSHADOW || target.bSTEALTH)
          {
            bool showHidden = CVar.GetCVar("m8f_ts_show_hidden", player).GetInt();
            if (!showHidden) { return null; }
          }
      }
    else // not monsters
      {
        switch (showObjects)
          {
          case 0: return null;
          case 1:
            if (target.bSHOOTABLE) { return target; }
            else                   { return null;   }
          case 2:
            if (target.bSHOOTABLE || target is "Inventory") { return target; }
            else                                            { return null;   }
          case 3:
            return target;
          }
      }

    return target;
  }

  static string SeparateCamelCase(string source)
  {
    int sourceLength = source.Length();
    string result = "";
    string letter1 = source.CharAt(0);
    string letter2;

    for (int i = 1; i < sourceLength; ++i)
      {
        letter2 = source.CharAt(i);
        if (IsSmallLetter(letter1) && IsBigLetter(letter2))
          {
            result.AppendFormat("%s ", letter1);
          }
        else
          {
            result.AppendFormat(letter1);
          }
        letter1 = letter2;
      }
    result.AppendFormat(letter2);

    return result;
  }

  static bool IsSmallLetter(string letter)
  {
    int code = letter.CharCodeAt(0);
    return (97 <= code && code <= 122);
  }

  static bool IsBigLetter(string letter)
  {
    int code = letter.CharCodeAt(0);
    return (65 <= code && code <= 90);
  }

  static void GetAdditionalTargetInfo(Actor a)
  {
    if (!a) { return; }
    PlayerInfo player =  a.player;
    if (!player) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultString(player, ""); return; }

    string result = "";

    if (target.bFRIENDLY)
      {
        result = "Friendly";
      }

    if (target.bINVULNERABLE)
      {
        if (result.Length() > 0) { result.AppendFormat(" "); }
        result.AppendFormat("Invulnerable");
      }

    if (target.bBOSS)
      {
        if (result.Length() > 0) { result.AppendFormat(" "); }
        result.AppendFormat("Boss");
      }

    SendResultString(player, result);
  }

  static void CustomTargetColor(Actor a)
  {
    if (!a) { return; }
    PlayerInfo player =  a.player;
    if (!player) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultInt(player, 0); return; }

    string customColorTokenClass = "tr_color_token";
    int customColor = target.CountInv(customColorTokenClass);
    SendResultInt(player, customColor);
  }

  static void HealTarget(Actor a, int amount)
  {
    if (!a) { return; }
    PlayerInfo player =  a.player;
    if (!player) { return; }

    Actor target = GetTarget(a);
    if (target == null) { return; }

    Console.Printf("%d", (target.Health * 10) / target.SpawnHealth());
    target.Health += amount;
  }
}

class TagCache : Thinker
{
  string cachedClass;
  string cachedTag;

  void SetCache(string targetClass, string targetTag)
  {
    cachedClass = targetClass;
    cachedTag   = targetTag;
  }

  TagCache Init()
  {
    ChangeStatNum(STAT_INFO);
    return self;
  }

  static TagCache Get()
  {
    let it = ThinkerIterator.Create("TagCache", STAT_INFO);
    let p  = TagCache(it.Next());
    if (p == null) { p = new("TagCache").Init(); }
    return p;
  }
}

class m8f_ts_TargetCache : Thinker
{
  Actor lastTarget;

  m8f_ts_TargetCache Init()
  {
    ChangeStatNum(STAT_INFO);
    lastTarget = null;
    return self;
  }

  static m8f_ts_TargetCache Get()
  {
    let it = ThinkerIterator.Create("m8f_ts_TargetCache", STAT_INFO);
    let p  = m8f_ts_TargetCache(it.Next());
    if (p == null) { p = new("m8f_ts_TargetCache").Init(); }
    return p;
  }
}

class m8f_ts_EventHandler : EventHandler
{
  override void WorldThingDied(WorldEvent event)
  {
    PlayerInfo player = players[consolePlayer];
    if (CVar.GetCVar("m8f_ts_show_confirm", player).GetInt()
        && event.thing == m8f_ts_TargetCache.Get().lastTarget)
    {
      CVar.GetCVar("m8f_ts_KillConfirmed", player).SetInt(10);
    }
  }
}

class m8f_ts_InvisiblePuff : Actor
{
  Default
  {
    Mass 0;
    Radius 1;
    Height 2;
    +NOBLOCKMAP;
    +NOGRAVITY;
    +BLOODLESSIMPACT;
    +PUFFONACTORS;
    +DONTSPLASH;
    +NOTRIGGER;
    +FORCEXYBILLBOARD;
    +NOTONAUTOMAP;
  }

  States { Spawn: TNT1 A 0; Stop; }
}

class m8f_ts_StringSet
{
  Array<string> values;

  void print()
  {
    uint size = values.size();
    Console.Printf("Size: %d", size);
    for (int i = 0; i < size; ++i)
      {
        Console.Printf(values[i]);
      }
  }

  void push(string s)
  {
    // array is sorted
    uint size = values.size();
    uint i    = 0;
    for (; i < size && values[i] < s; ++i);
    values.insert(i, s);
  }

  bool contains(string s)
  {
    // binary search
    int size = values.size();
    int L    = 0;
    int R    = size - 1;

    while (L <= R)
      {
        int m = (L + R) / 2;
        string current = values[m];
        if      (current <  s) { L = m + 1; }
        else if (current >  s) { R = m - 1; }
        else if (current == s) { return true; }
      }
    return false;
  }
}

class m8f_ts_StringMap
{
  Array<string> keys;
  Array<string> values;

  void print()
  {
    uint size = values.size();
    Console.Printf("Size: %d", size);
    for (int i = 0; i < size; ++i)
      {
        Console.Printf("%s: %s", keys[i], values[i]);
      }
  }

  void push(string key, string value)
  {
    // array is sorted
    uint size = values.size();
    uint i    = 0;
    for (; i < size && keys[i] < key; ++i);
    keys.insert(i, key);
    values.insert(i, value);
  }

  string get(string key)
  {
    // binary search
    int size = values.size();
    int L    = 0;
    int R    = size - 1;

    while (L <= R)
      {
        int m = (L + R) / 2;
        string current = keys[m];
        if      (current <  key) { L = m + 1; }
        else if (current >  key) { R = m - 1; }
        else if (current == key) { return values[m]; }
      }
    return "";
  }
}

class m8f_ts_StringSetTester : Actor
{
  States { Spawn: TNT1 A 0; TNT1 A 0
    {

      let set = new("m8f_ts_StringSet");
      set.push("3three");
      set.push("2two");
      set.push("1one");
      set.push("4");
      set.push("2two");
      set.print();

      Console.Printf("%d", set.contains("4"));
      Console.Printf("%d", set.contains("5"));
      Console.Printf("%d", set.contains("2two"));

    } stop; }
}

class m8f_ts_StringMapTester : Actor
{
  States { Spawn: TNT1 A 0; TNT1 A 0
    {

      let set = new("m8f_ts_StringMap");
      set.push("3", "three");
      set.push("2", "two");
      set.push("1", "one");
      set.push("4", "four");
      set.push("2", "two");
      set.print();

      Console.Printf("%s", set.get("4"));
      Console.Printf("%s", set.get("5"));
      Console.Printf("%s", set.get("2two"));
      Console.Printf("%s", set.get("2"));

    } stop; }
}

class m8f_ts_Data : Thinker
{
  m8f_ts_StringMap championTokens;
  m8f_ts_StringMap specialNames;

  m8f_ts_Data init()
  {
    championTokens = new("m8f_ts_StringMap");
    specialNames   = new("m8f_ts_StringMap");

    championTokens.push( "champion_BlackToken"     , "Brutal"      );
    championTokens.push( "champion_BlueToken"      , "Retaliating" );
    championTokens.push( "champion_BronzeToken"    , "Tough"       );
    championTokens.push( "champion_CyanToken"      , "Vortex"      );
    championTokens.push( "champion_DarkGreenToken" , "Toxic"       );
    championTokens.push( "champion_DarkRedToken"   , "Reanimating" );
    championTokens.push( "champion_GoldToken"      , "Golden"      );
    championTokens.push( "champion_GreenToken"     , "Phasing"     );
    championTokens.push( "champion_GreyToken"      , "Nimble"      );
    championTokens.push( "champion_IndigoToken"    , "Fissile"     );
    championTokens.push( "champion_OrangeToken"    , "Exploding"   );
    championTokens.push( "champion_PinkToken"      , "Healer"      );
    championTokens.push( "champion_RedToken"       , "Sturdy"      );
    championTokens.push( "champion_SilverToken"    , "Reflective"  );
    championTokens.push( "champion_VioletToken"    , "Relentless"  );
    championTokens.push( "champion_WhiteToken"     , "Restraining" );
    championTokens.push( "champion_YellowToken"    , "Fast"        );

    specialNames.push( "Arachnotron_free"      , "Technospider"       );
    specialNames.push( "Archvile"              , "Arch-vile"          );
    specialNames.push( "Archvile_free"         , "Flame Bringer"      );
    specialNames.push( "BD_Arachnotron"        , "Arachnotron"        );
    specialNames.push( "BD_ArchVile"           , "Arch-vile"          );
    specialNames.push( "BD_BaronOfHell"        , "Baron Of Hell"      );
    specialNames.push( "BD_Cacodemon"          , "Cacodemon"          );
    specialNames.push( "BD_ChaingunGuy"        , "Chaingunner"        );
    specialNames.push( "BD_CyberDemon"         , "Cyberdemon"         );
    specialNames.push( "BD_Demon"              , "Demon"              );
    specialNames.push( "BD_DoomImp"            , "Imp"                );
    specialNames.push( "BD_Fatso"              , "Mancubus"           );
    specialNames.push( "BD_HellKnight"         , "Hell Knight"        );
    specialNames.push( "BD_LostSoul"           , "Lost Soul"          );
    specialNames.push( "BD_PainElemental"      , "Pain Elemental"     );
    specialNames.push( "BD_Revenant"           , "Revenant"           );
    specialNames.push( "BD_ShotgunGuy"         , "Sergeant"           );
    specialNames.push( "BD_Spectre"            , "Spectre"            );
    specialNames.push( "BD_SpiderMastermind"   , "Spider Mastermind"  );
    specialNames.push( "BD_WolfensteinSS"      , "Wolfenstein SS"     );
    specialNames.push( "BaronOfHell_free"      , "Pain Lord"          );
    specialNames.push( "Cacodemon_free"        , "Trilobite"          );
    specialNames.push( "ChaingunGuy"           , "Chaingunner"        );
    specialNames.push( "ChaingunGuy_free"      , "Minigun Zombie"     );
    specialNames.push( "CommanderKeen_free"    , "Alien Spawn"        );
    specialNames.push( "Cyberdemon_free"       , "Assault Tripod"     );
    specialNames.push( "Demon_free"            , "Flesh Worm"         );
    specialNames.push( "DoomImp"               , "Imp"                );
    specialNames.push( "DoomImp_free"          , "Serpentipede"       );
    specialNames.push( "EVPArachnotron"        , "Arachnotron"        );
    specialNames.push( "EVPArchVile"           , "Arch-vile"          );
    specialNames.push( "EVPBaron"              , "Baron Of Hell"      );
    specialNames.push( "EVPCacodemon"          , "Cacodemon"          );
    specialNames.push( "EVPChaingunner"        , "Chaingunner"        );
    specialNames.push( "EVPCyberdemon"         , "Cyberdemon"         );
    specialNames.push( "EVPDemon"              , "Demon"              );
    specialNames.push( "EVPHellKnight"         , "Hell Knight"        );
    specialNames.push( "EVPImp"                , "Imp"                );
    specialNames.push( "EVPLostSoul"           , "Lost Soul"          );
    specialNames.push( "EVPMancubus"           , "Mancubus"           );
    specialNames.push( "EVPPainElemental"      , "Pain Elemental"     );
    specialNames.push( "EVPRevenant"           , "Revenant"           );
    specialNames.push( "EVPShotgunner"         , "Sergeant"           );
    specialNames.push( "EVPSpectre"            , "Spectre"            );
    specialNames.push( "EVPSpiderMastermind"   , "Spider Mastermind"  );
    specialNames.push( "Fatso"                 , "Mancubus"           );
    specialNames.push( "Fatso_free"            , "Combat Slug"        );
    specialNames.push( "LostSoul_free"         , "Deadflare"          );
    specialNames.push( "PainElemental_free"    , "Summoner"           );
    specialNames.push( "Revenant_free"         , "Dark Soldier"       );
    specialNames.push( "ShotgunGuy"            , "Sergeant"           );
    specialNames.push( "ShotgunGuy_free"       , "Shotgun Zombie"     );
    specialNames.push( "SpiderMastermind_free" , "Large Technospider" );
    specialNames.push( "WolfensteinSS_free"    , "Sailor"             );
    specialNames.push( "ZombieMan_free"        , "Zombie"             );

    return self;
  }

  static m8f_ts_Data get()
  {
    let it = ThinkerIterator.Create("m8f_ts_Data", STAT_INFO);
    let p  = m8f_ts_Data(it.Next());

    if (p != null) { return p; }
    else           { return new("m8f_ts_Data").init(); }
  }
}
