version "3.2.0"

class TSZScriptHelper : Actor
{
  static void SendResultString(PlayerInfo player, string result)
  {
    if (!player) { return; }
    CVar messageCVar = CVar.GetCVar("m8f_ts_ResultString", player);
    if (messageCVar) { messageCVar.SetString(result); }
  }

  static void SendResultInt(PlayerInfo player, int result)
  {
    if (!player) { return; }
    CVar messageCVar = CVar.GetCVar("m8f_ts_ResultInt", player);
    if (messageCVar) { messageCVar.SetInt(result); }
  }

  static void TargetIsPresent(Actor a)
  {
    if (!a) { return; }

    Actor target = GetTarget(a);
    bool isPresent = (target != null);
    SendResultInt(a.player, isPresent);
  }

  static void GetTargetHealth(Actor a)
  {
    if (!a) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultInt(a.player, 0); return; }

    int targetHealth = target.Health;
    SendResultInt(a.player, targetHealth);
  }

  static void GetTargetMaxHealth(Actor a)
  {
    if (!a) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultInt(a.player, 0); return; }

    int targetMaxHealth = target.SpawnHealth();
    SendResultInt(a.player, targetMaxHealth);
  }

  static void GetTargetName(Actor a)
  {
    if (!a) { return; }

    Actor target = GetTarget(a);
    if (target == null) { SendResultString(a.player, "unknown"); return; }

    string targetName = target.GetTag();
    targetName = SeparateCamelCase(targetName);
    targetName.Replace("_", " ");

    SendResultString(a.player, targetName);
  }

  static Actor GetTarget(Actor a)
  {
    let player = a.player;
    if (!player) { return null; }

    Actor target = player.mo.AimTarget();
    return target;
  }

  static string SeparateCamelCase(string source)
  {
    int sourceLength = source.Length();
    string result = "";
    string letter1 = source.CharAt(0);
    string letter2;

    for (int i = 1; i < sourceLength; ++i)
      {
        letter2 = source.CharAt(i);
        if (IsSmallLetter(letter1) && IsBigLetter(letter2))
          {
            result.AppendFormat("%s ", letter1);
          }
        else
          {
            result.AppendFormat(letter1);
          }
        letter1 = letter2;
      }
    result.AppendFormat(letter2);

    return result;
  }

  static bool IsSmallLetter(string letter)
  {
    int code = letter.CharCodeAt(0);
    return (97 <= code && code <= 122);
  }

  static bool IsBigLetter(string letter)
  {
    int code = letter.CharCodeAt(0);
    return (65 <= code && code <= 90);
  }

}
